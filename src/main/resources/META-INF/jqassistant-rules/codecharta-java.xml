<jqassistant-rules xmlns="http://schema.jqassistant.org/rule/v2.2"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://schema.jqassistant.org/rule/v2.2 https://jqassistant.github.io/jqassistant/current/schema/jqassistant-rule-v2.2.xsd">

    <concept id="codecharta-java:TypeMetrics">
        <requiresConcept refId="java:GeneratedType"/>
        <requiresConcept refId="java:InnerType"/>
        <description>Provides empty node and edge metrics for Java types aggregating their inner types.</description>
        <cypher><![CDATA[
            MATCH
              (:Artifact)-[:CONTAINS]->(metricsType:Java:Type)
            WHERE NOT
              metricsType:Inner
            WITH
              metricsType
            MATCH
              (metricsType)-[:DECLARES*0..]->(aggregatedType:Type)
            WHERE NOT
              aggregatedType:Generated
            MERGE
              (metricsType)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics)
            MERGE
              (nodeMetrics)-[:AGGREGATES]->(aggregatedType)
            RETURN
              count(nodeMetrics) AS NodeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:TypeMemberMetrics">
        <providesConcept refId="codecharta-java:TypeReport"/>
        <requiresConcept refId="codecharta-java:TypeMetrics"/>
        <description>Provides LoC and CC node metrics for Java types.</description>
        <cypher><![CDATA[
            MATCH
              (nodeMetrics:CodeCharta:Node:Metrics)-[:AGGREGATES]->(type:Type)-[:DECLARES]->(method:Method)
            WITH
              nodeMetrics, sum(method.effectiveLineCount) AS rloc, sum(method.cyclomaticComplexity) AS complexity
            SET
              nodeMetrics.rloc = rloc
            SET
              nodeMetrics.complexity = complexity
            RETURN
              count(nodeMetrics) AS NodeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:TypeFanInMetrics">
        <providesConcept refId="codecharta-java:TypeReport"/>
        <requiresConcept refId="codecharta-java:TypeMetrics"/>
        <description>Provides FanIn node metrics for Java types.</description>
        <cypher><![CDATA[
            MATCH
              (type:Type)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics),
              (:Artifact)-[:CONTAINS]->(dependent:Type)-[:DEPENDS_ON]->(type)
            WHERE NOT
              (nodeMetrics)-[:AGGREGATES]->(dependent:Type)
            WITH
              nodeMetrics, count(dependent) AS fanIn
            SET
              nodeMetrics.fanIn = fanIn
            RETURN
              count(nodeMetrics) AS NodeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:TypeFanOutMetrics">
        <providesConcept refId="codecharta-java:TypeReport"/>
        <requiresConcept refId="codecharta-java:TypeMetrics"/>
        <description>Provides FanOut node metrics for Java types.</description>
        <cypher><![CDATA[
            MATCH
              (type:Type)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics),
              (type)-[:DEPENDS_ON]->(dependency:Type)<-[:CONTAINS]-(:Artifact)
            WHERE NOT
              (nodeMetrics)-[:AGGREGATES]->(dependency:Type)
            WITH
              nodeMetrics, count(dependency) AS fanOut
            SET
              nodeMetrics.fanOut = fanOut
            RETURN
              count(nodeMetrics) AS NodeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:TypeCouplingMetrics">
        <providesConcept refId="codecharta-java:TypeReport"/>
        <requiresConcept refId="codecharta-java:TypeMetrics"/>
        <description>Provides FanOut node and edge metrics for Java types.</description>
        <cypher><![CDATA[
            MATCH
              (type:Type)-[:HAS_METRICS]->(fromNodeMetrics:CodeCharta:Node:Metrics),
              (dependency:Type)-[:HAS_METRICS]->(toNodeMetrics:CodeCharta:Node:Metrics),
              (fromNodeMetrics)-[:AGGREGATES]->(:Type)-[dependsOn:DEPENDS_ON]->(:Type)<-[:AGGREGATES]-(toNodeMetrics)
            WHERE
              fromNodeMetrics <> toNodeMetrics
            WITH
              type, sum(dependsOn.weight) as coupling, dependency
            CALL {
              WITH
                type, coupling, dependency
              MERGE
                (type)-[:HAS_METRICS]->(edgeMetrics:CodeCharta:Edge:Metrics)-[:TO]->(dependency)
              SET
                edgeMetrics.coupling = coupling
              RETURN
                edgeMetrics
            } IN TRANSACTIONS
            RETURN
              count(edgeMetrics) AS EdgeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:TypeReport">
        <providesConcept refId="codecharta:Metrics"/>
        <description>Creates a CodeCharta report for Java types.</description>
        <cypher><![CDATA[
            MATCH
              (type:Java:Type)-[:HAS_METRICS]->(:CodeCharta:Metrics),
              tree = shortestPath((root:Java:Package)-[:CONTAINS*]->(type))
            WHERE NOT (
              type:Generated
              or (:Package)-[:CONTAINS]->(root) // identify the root package
            )
            WITH
              nodes(tree) as nodes
            UNWIND
              nodes as node // filter out duplicate packages
            WITH
              distinct node
            OPTIONAL MATCH
              (parentNode:Package)-[:CONTAINS]->(node)
            OPTIONAL MATCH
              (node)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics)
            OPTIONAL MATCH
              (node)-[:HAS_METRICS]->(edgeMetrics:CodeCharta:Edge:Metrics)-[:TO]->(toNode)
            RETURN
              node AS Node, node.name AS NodeLabel, parentNode AS ParentNode, nodeMetrics AS NodeMetrics, collect({to: toNode, metrics: edgeMetrics}) as EdgeMetrics
            ]]></cypher>
        <report type="codecharta"/>
    </concept>

    <concept id="codecharta-java:MavenMetrics">
        <description>Provides empty node and edge metrics for Maven modules.</description>
        <cypher><![CDATA[
            MATCH
              (project:Maven:Project:Directory)
            MERGE
              (project)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics)
            RETURN
              count(nodeMetrics) AS NodeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:MavenNumberOfTypes">
        <providesConcept refId="codecharta-java:MavenReport"/>
        <requiresConcept refId="codecharta-java:MavenMetrics"/>
        <description>Provides numberOfTypes metrics for Maven modules.</description>
        <cypher><![CDATA[
            MATCH
              (project:Maven:Project:Directory)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics),
              (project)-[:CREATES]->(:Artifact)-[:CONTAINS]->(type:Java:Type)
            WITH
              project, nodeMetrics, count(type) as numberOfTypes
            SET
              nodeMetrics.numberOfType = nodeMetrics.numberOfType + numberOfTypes
            RETURN
              count(nodeMetrics) as NodeMetrics
            ]]></cypher>
    </concept>

    <concept id="codecharta-java:MavenTypeMetrics">
        <providesConcept refId="codecharta-java:MavenReport"/>
        <requiresConcept refId="codecharta-java:MavenMetrics"/>
        <requiresConcept refId="codecharta-java:TypeMemberMetrics"/>
        <description>Provides aggregated type metrics for Maven modules.</description>
        <cypher><![CDATA[
            MATCH
              (project:Maven:Project:Directory)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics),
              (project)-[:CREATES]->(:Artifact)-[:CONTAINS]->(type:Java:Type)-[:HAS_METRICS]->(typeMetrics:Node:Metrics)
            WITH
              project, nodeMetrics, sum(typeMetrics.rloc) as rloc, sum(typeMetrics.complexity) as complexity
            SET
              nodeMetrics.rloc = rloc
            SET
              nodeMetrics.complexity = complexity
            RETURN
              count(nodeMetrics) as NodeMetrics
            ]]></cypher>
    </concept>

    <concept id="codecharta-java:MavenFanInMetrics">
        <providesConcept refId="codecharta-java:MavenReport"/>
        <description>Provides FanIn node metrics for Maven modules.</description>
        <cypher><![CDATA[
            MATCH
              (project:Maven:Project:Directory)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics),
              (project)-[:CREATES]->(:Artifact)-[:CONTAINS]->(type:Type),
              (dependentProject:Maven:Project:Directory)-[:HAS_METRICS]->(:CodeCharta:Node:Metrics),
              (dependentProject)-[:CREATES]->(:Artifact)-[:CONTAINS]->(dependentType:Type),
              (type)<-[:DEPENDS_ON]-(dependentType)
            WHERE
              project <> dependentProject
            WITH
              nodeMetrics, count(dependentType) as fanIn
            SET
              nodeMetrics.fanIn = fanIn
            RETURN
              count(nodeMetrics) AS NodeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:MavenFanOutMetrics">
        <providesConcept refId="codecharta-java:MavenReport"/>
        <description>Provides FanOut node metrics for Maven modules.</description>
        <cypher><![CDATA[
            MATCH
              (project:Maven:Project:Directory)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics),
              (project)-[:CREATES]->(:Artifact)-[:CONTAINS]->(type:Type),
              (dependencyProject:Maven:Project:Directory)-[:HAS_METRICS]->(:CodeCharta:Node:Metrics),
              (dependencyProject)-[:CREATES]->(:Artifact)-[:CONTAINS]->(dependencyType:Type),
              (type)-[:DEPENDS_ON]->(dependencyType)
            WHERE
              project <> dependencyProject
            WITH
              nodeMetrics, count(dependencyType) as fanOut
            SET
              nodeMetrics.fanOut = fanOut
            RETURN
              count(nodeMetrics) AS NodeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:MavenCouplingMetrics">
        <providesConcept refId="codecharta-java:MavenReport"/>
        <requiresConcept refId="codecharta-java:MavenMetrics"/>
        <description>Provides FanOut node and edge metrics for Maven modules.</description>
        <cypher><![CDATA[
            MATCH
              (project:Maven:Project:Directory)-[:HAS_METRICS]->(:CodeCharta:Node:Metrics),
              (project)-[:CREATES]->(:Artifact)-[:CONTAINS]->(dependentType:Type),
              (dependencyProject:Maven:Project:Directory)-[:HAS_METRICS]->(:CodeCharta:Node:Metrics),
              (dependencyProject)-[:CREATES]->(:Artifact)-[:CONTAINS]->(dependencyType:Type),
              (dependentType)-[dependsOn:DEPENDS_ON]->(dependencyType)
            WHERE
              project <> dependencyProject
            WITH
              project, count(dependsOn) as coupling, sum(dependsOn.weight) as totalCoupling, dependencyProject
            CALL {
              WITH
                project, coupling, totalCoupling, dependencyProject
              MERGE
                (project)-[:HAS_METRICS]->(edgeMetrics:CodeCharta:Edge:Metrics)-[:TO]->(dependencyProject)
              SET
                edgeMetrics.coupling = coupling
              SET
                edgeMetrics.totalCoupling = totalCoupling
              RETURN
                edgeMetrics
            } IN TRANSACTIONS
            RETURN
              count(edgeMetrics) AS EdgeMetrics
            ]]></cypher>
        <verify>
            <aggregation/>
        </verify>
    </concept>

    <concept id="codecharta-java:MavenReport">
        <providesConcept refId="codecharta:Metrics"/>
        <description>Creates a CodeCharta report for Maven modules.</description>
        <cypher><![CDATA[
            MATCH
              (node:Maven:Project:Directory)-[:HAS_METRICS]->(nodeMetrics:CodeCharta:Node:Metrics)
            OPTIONAL MATCH
              (parent:Maven:Project:Directory)-[:HAS_MODULE]->(node)
            OPTIONAL MATCH
              (node)-[:HAS_METRICS]->(edgeMetrics:CodeCharta:Edge:Metrics)-[:TO]->(toNode)
            RETURN
              node AS Node, node.fqn AS NodeLabel, parent AS ParentNode, nodeMetrics as NodeMetrics, collect({to: toNode, metrics: edgeMetrics}) as EdgeMetrics
            ]]></cypher>
        <report type="codecharta"/>
    </concept>

</jqassistant-rules>
